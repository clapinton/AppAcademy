c
n
s
@current_node
n
s
@current_node
next_node
n
s
list
@closed_list
@current_node
adjacent_nodes
n
adjacent_positions
n
exit
@closed_list
@current_list
@open_list
where
@current_node
exit
s
n
@current_node
s
@current_node
s
n
@current_node
n
@start_position
c
n
disp adjacent_positions
disp @current_node
c
disp adjacent_positions
@current_node
exit
adjacent_positions
c
disp @current_node
exit
adjacent_nodes
n
adjacent_positions
n
c
disp @current_node
exit
c
s
disp @current_node
exit
c
disp @current_node
c
@current_node
exit
c
exit
current_node
exit
@maze
s
c
@nodes_positions
s
exit
@nodes_positions
n
s
c
@nodes_positions
s
c
@nodes_positions
s
c
s
n
s
node
row
s
disp new_grid.grid
disp new_grid
s
new_grid
s
@maze[5,1]
@maze[0,0]
@maze.grid
@maze
exit
@nodes_positions[5]
@nodes_positions[5,1]
*position
@position
position
@nodes_positions[*position]
@nodes_positions
s
position
s
positions
position
s
adjacent_positions
c
s
puts @nodes_positions
p @nodes_positions
@nodes_positions
s
c
@grid
@grid[row][col]
col
row
@grid
s
c
@nodes_positions.grid[0,0].empty?
@nodes_positions.grid[0,0].nil?
@nodes_positions.grid[0,0]
@nodes_positions.grid
@nodes_positions
s
c
exit
@nodes_positions[0].empty?
@nodes_positions[0].empty
@nodes_positions[0]
@nodes_positions
s
c
exit
@maze.PATH_WEIGHTS
@maze
s
c
exit
@maze
s
self
s
@nodes_position(position).empty?
@nodes_position(position)
@nodes_positions
c
position
c
exit
list=
@maze
@non_walkables
@maze
exit
node
s
symbol
c
symbol
exit
s
exit
c
s
disp start_pos
exit
c
s
disp start_pos
exit
start_pos
c
exit
start_pos
row
s
